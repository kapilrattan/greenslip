/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.rsys.greenslip.phonereceipt.dao;

import com.rsys.greenslip.phonereceipt.dto.DropdownResourceDTO;
import com.rsys.greenslip.phonereceipt.dto.ReceiptDTO;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 *
 * @author krattan
 */
public class PhoneReceiptDAOImpl implements PhoneReceiptDAO {

    Connection connection = null;

    public Connection getConnection() {
        try {
            Class.forName("com.mysql.jdbc.Driver");
            if (connection == null) {
                connection = DriverManager.getConnection("jdbc:mysql://localhost/phonereceipt?user=receipt&password=password");
            }
        } catch (ClassNotFoundException e) {

            e.printStackTrace();

        } catch (SQLException e) {

            e.printStackTrace();

        }
        return connection;
    }

    @Override
    public int saveReceipt(ReceiptDTO receiptDTO) {
        int autoGeneratedID = -1;
        try {
            PreparedStatement preparedStatement = getConnection().prepareStatement("INSERT INTO phonereceipt.tblReceipt(storeName,phoneModel,phoneMake,phoneCondition,amount,sellerName,sellerContactNumber,sellerEmailId,sellerPhotoIdType,photoIdLocation,storeManager,sellerSignature,tradeDate,pdfFilePath,imeiNumber,photoIdExternalPath,signatureExternalPath,photoIdBackExternalLocation) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", Statement.RETURN_GENERATED_KEYS);
            preparedStatement.setString(1, receiptDTO.getStoreName());
            preparedStatement.setString(2, receiptDTO.getPhoneModel());
            preparedStatement.setString(3, receiptDTO.getPhoneMake());
            preparedStatement.setString(4, receiptDTO.getPhoneCondition());
            preparedStatement.setDouble(5, receiptDTO.getAmount());
            preparedStatement.setString(6, receiptDTO.getSellerName());
            preparedStatement.setString(7, receiptDTO.getSellerContactNumber());
            preparedStatement.setString(8, receiptDTO.getSellerEmailId());
            preparedStatement.setString(9, receiptDTO.getSellerPhotoIdType());
            preparedStatement.setString(10, receiptDTO.getSellerPhotoIdType());
            preparedStatement.setString(11, receiptDTO.getStoreManager());
            preparedStatement.setString(12, receiptDTO.getSignature());
            java.sql.Date sqlDate = new java.sql.Date(receiptDTO.getTradeDate().getTime());
            preparedStatement.setDate(13, sqlDate);
            preparedStatement.setString(14, receiptDTO.getPdfFilePath());
            preparedStatement.setString(15, receiptDTO.getImeiNumber());
            preparedStatement.setString(16, receiptDTO.getImageExternalPath());
            preparedStatement.setString(17, receiptDTO.getSignatureExternalPath());
            preparedStatement.setString(18, receiptDTO.getBackImageExternalPath());

            preparedStatement.executeUpdate();
            ResultSet tableKeys = preparedStatement.getGeneratedKeys();
            tableKeys.next();
            autoGeneratedID = tableKeys.getInt(1);
            preparedStatement.close();
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            closeConnection();
        }
        return autoGeneratedID;
    }

    @Override
    public List<ReceiptDTO> getReceiptList() {
        List<ReceiptDTO> resultList = new ArrayList<>();
        try {
            String sqlQuery = "SELECT * from phonereceipt.tblReceipt";
            PreparedStatement preparedStatement = getConnection().prepareStatement(sqlQuery, Statement.RETURN_GENERATED_KEYS);
            ResultSet resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {

                ReceiptDTO receiptDTO = new ReceiptDTO();
                receiptDTO.setAmount(resultSet.getFloat("amount"));
                receiptDTO.setImeiNumber(resultSet.getString("imeiNumber"));
                receiptDTO.setPdfFilePath(resultSet.getString("pdfFilePath"));
                receiptDTO.setPhoneCondition(resultSet.getString("phoneCondition"));
                receiptDTO.setPhoneMake(resultSet.getString("phoneMake"));
                receiptDTO.setPhoneModel(resultSet.getString("phoneModel"));
                receiptDTO.setPhotoIdLocation(resultSet.getString("photoIdLocation"));
                receiptDTO.setReceiptId(resultSet.getInt("receiptId"));
                receiptDTO.setSellerContactNumber(resultSet.getString("sellerContactNumber"));
                receiptDTO.setSellerEmailId(resultSet.getString("sellerEmailId"));
                receiptDTO.setSellerName(resultSet.getString("sellerName"));
                receiptDTO.setSellerPhotoIdType(resultSet.getString("sellerPhotoIdType"));
                receiptDTO.setSellerSignature(resultSet.getString("sellerSignature"));
                receiptDTO.setStoreManager(resultSet.getString("storeManager"));
                receiptDTO.setStoreName(resultSet.getString("storeName"));
                receiptDTO.setTradeDate(resultSet.getDate("tradeDate"));
                receiptDTO.setImageExternalPath(resultSet.getString("photoIdExternalPath"));
                receiptDTO.setPhotoIdBackLocation(resultSet.getString("photoIdBackExternalLocation"));
                receiptDTO.setSignatureExternalPath(resultSet.getString("signatureExternalPath"));
                resultList.add(receiptDTO);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        } finally {
            closeConnection();
        }
        return resultList;
    }

    @Override
    public List<ReceiptDTO> getReceiptListByDate(Date fromDate, Date toDate) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public List<ReceiptDTO> getReceiptListByIMEI(String imei) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public List<ReceiptDTO> getReceiptListBySellerName(String sellerName) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public List<ReceiptDTO> getReceiptListBySellerContact(String sellerContact) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    public void closeConnection() {
        try {
            if (connection != null) {
                connection.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public List<DropdownResourceDTO> getDropdownResource(String resource, String resourceQuery) {
        List<DropdownResourceDTO> resultList = new ArrayList<>();
        try {
//            select * from tblreceipt where phonemodel like 'x%' ;
            String sqlQuery = "SELECT * from phonereceipt.tbl" + resource + " where value like '%" + resourceQuery + "%' order by id desc";
            System.out.println("SQL Query:"+sqlQuery);
            PreparedStatement preparedStatement = getConnection().prepareStatement(sqlQuery, Statement.RETURN_GENERATED_KEYS);
            ResultSet resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                DropdownResourceDTO resourceDTO = new DropdownResourceDTO();
                resourceDTO.setId(resultSet.getInt("id"));
                resourceDTO.setValue(resultSet.getString("value"));
                resultList.add(resourceDTO);
                System.out.println(resourceDTO);
            }
        } catch (Exception exception) {
            exception.printStackTrace();
        } finally {
            closeConnection();
        }
        return resultList;

    }

    @Override
    public String addDropdownResource(String resource, String resourceValue) {
        int autoGeneratedID = -1;
        String result = null;
        try {
            String sqlQuery = "INSERT INTO phonereceipt.tbl"+resource+" (value) values(?)"; 
            PreparedStatement preparedStatement = getConnection().prepareStatement(sqlQuery, Statement.RETURN_GENERATED_KEYS);
            preparedStatement.setString(1, resourceValue);
            preparedStatement.executeUpdate();
            ResultSet tableKeys = preparedStatement.getGeneratedKeys();
            tableKeys.next();
            autoGeneratedID = tableKeys.getInt(1);
            preparedStatement.close();
            result =autoGeneratedID + ""; 
        } catch (Exception exception) {
            exception.printStackTrace();
        } finally {
            closeConnection();
        }
        return result;
    }
}
